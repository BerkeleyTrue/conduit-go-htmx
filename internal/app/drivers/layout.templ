package drivers

import "github.com/berkeleytrue/conduit/internal/core/services"
import "fmt"
import "github.com/berkeleytrue/conduit/internal/infra/session"

type headerProps struct {
	title  string
	page   string
	uri    string
	userId int
	user   services.UserOutput
	links  []Link
}

templ header(props headerProps) {
	<nav class="navbar navbar-light" hx-boost="true" hx-push-url="true">
		<div class="container">
			<a class="navbar-brand" href="/">conduit</a>
			<ul class="nav navbar-nav pull-xs-right">
				for _, link := range props.links {
					<li class="nav-item">
						<a
 							href={ templ.URL(link.Uri) }
 							if props.page == props.uri {
								class="nav-link active"
							} else {
								class="nav-link"
							}
						>
							{ link.Title }
						</a>
					</li>
				}
				if props.userId != 0 {
					<li class="nav-item">
						<a class="nav-link" href={ templ.URL(fmt.Sprintf("/profile/%s", props.user.Username)) }>
							if props.user.Image != "" {
								<img src={ props.user.Image } class="user-pic"/>
							} else {
								<img src="https://placehold.co/200" class="user-pic"/>
							}
							{ props.user.Username }
						</a>
					</li>
				}
			</ul>
		</div>
	</nav>
}

templ footer() {
	<footer>
		<div class="container">
			<a href="/" class="logo-font">conduit</a>
			<span class="attribution">
				An interactive learning project from
				<a href="https://thinkster.io">Thinkster</a>
				. Code &amp; design licensed
				under MIT.
			</span>
		</div>
	</footer>
}

type layoutProps struct {
	title   string
	page    string
	uri     string
	userId  int
	user    services.UserOutput
	links   []Link
	isDev   bool
	flashes []session.Flash
}

templ layout(props layoutProps) {
	<!DOCTYPE html>
	<html lang="en" class="fullscreen" data-theme="catppuccin">
		<head>
			<meta charset="utf-8"/>
			<title>Conduit</title>
			<link
 				href="http://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css"
 				rel="stylesheet"
 				type="text/css"
			/>
			<link
 				href="https://fonts.googleapis.com/css?family=Titillium+Web:700|Source+Serif+Pro:400,700|Merriweather+Sans:400,700|Source+Sans+Pro:400,300,600,700,300italic,400italic,600italic,700italic"
 				rel="stylesheet"
 				type="text/css"
			/>
			<link
 				rel="icon"
 				type="image/x-icon"
 				href="https://www.realworld.how/img/favicon.ico"
			/>
			<!-- Import the custom Bootstrap 4 theme from our hosted CDN -->
			<link rel="stylesheet" href="https://demo.productionready.io/main.css"/>
			<script src="https://unpkg.com/htmx.org@1.9.5" integrity="sha384-xcuj3WpfgjlKF+FXhSQFQ0ZNr39ln+hwjN3npfM9VBnUskLolQAcN80McRIVOPuO" crossorigin="anonymous"></script>
			<script src="https://unpkg.com/hyperscript.org@0.9.11" crossorigin="anonymous"></script>
			<style>
				.fixed
				{
          position: fixed;
          top: 0;
          z-index: 1020;
          width: 100%;
        }
			</style>
		</head>
		<body
 			_="
		    on every htmx:afterRequest
		      if event.detail.successful
		        then set {hidden: true} on #htmx-alert
		      else if event.detail.failed and event.detail.xhr
		        then
		          log `server error: ${event.detail.xhr.status} - ${event.detail.xhr.statusText}`
		          set {hidden: false, innerText: &#39;Oops, something went wrong with the server...&#39;} on #htmx-alert
		      else
		        log `unknown error: ${event.detail}`
		        set {hidden: false, innerText: &#39;Unexpected error, check your connection and refresh the page&#39;} on #htmx-alert
		      end
		  "
		>
			<div
 				id="htmx-alert"
 				class="alert alert-warning fixed"
 				role="alert"
 				hidden
			></div>
			@alerts(alertProps{
        flashes: props.flashes,
      })
			@header(headerProps{
        title: props.title,
        page: props.page,
        uri: props.uri,
        userId: props.userId,
        user: props.user,
        links: props.links,
      })
			{ children... }
			@footer()
			if props.isDev {
				@hotreload()
			}
		</body>
	</html>
}
